/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/themes": {
        parameters: {
            query?: never;
            header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components["parameters"]["Accept"];
            };
            path?: never;
            cookie?: never;
        };
        /**
         * Get all Themes
         * @description Returns a list of store *Themes*.
         */
        get: operations["getStoreThemes"];
        put?: never;
        /**
         * Upload a Theme
         * @description Uploads a new *Theme* to your BigCommerce store.
         *
         *     **Required Fields**
         *     * file
         */
        post: operations["uploadStoreTheme"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/themes/{uuid}": {
        parameters: {
            query?: never;
            header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components["parameters"]["Accept"];
            };
            path: {
                /** @description The theme identifier. */
                uuid: components["parameters"]["ThemeIdParam"];
            };
            cookie?: never;
        };
        /**
         * Get a Theme
         * @description Returns a store *Theme*. The theme variation is not available at this endpoint.
         */
        get: operations["getStoreTheme"];
        put?: never;
        post?: never;
        /**
         * Delete a Theme
         * @description Deletes a store *Theme*.
         *     Theme variations can not be deleted using this endpoint. This will delete the theme and all variations.
         */
        delete: operations["deleteStoreTheme"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/themes/{uuid}/actions/download": {
        parameters: {
            query?: never;
            header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components["parameters"]["Accept"];
            };
            path: {
                /** @description The theme identifier. */
                uuid: components["parameters"]["ThemeIdParam"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Download a Theme
         * @description Downloads a stores *Theme*.
         */
        post: operations["downloadStoreTheme"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/themes/actions/activate": {
        parameters: {
            query?: {
                /** @description The ID for the channel where you want to activate the theme. */
                channel_id?: number;
            };
            header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components["parameters"]["Accept"];
            };
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Activate a Theme
         * @description Actives a store *Theme*.
         *
         *     This returns a 204 response upon success.
         */
        post: operations["activateStoreTheme"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/themes/jobs/{job_id}": {
        parameters: {
            query?: never;
            header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components["parameters"]["Accept"];
            };
            path: {
                /** @description The job identifier. */
                job_id: components["parameters"]["JobIdParam"];
            };
            cookie?: never;
        };
        /**
         * Get a Theme Job
         * @description Returns a theme *Job*. When the job is complete, the results array provides a generated link to access the theme. The link is active for 60 seconds.
         */
        get: operations["getStoreThemeJob"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/themes/{uuid}/configurations": {
        parameters: {
            query?: {
                /** @description Filter configurations by a list of configuration UUIDs. */
                "uuid:in"?: string[];
                /** @description Filter configurations by a variation_uuid */
                variation_uuid?: string;
            };
            header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components["parameters"]["Accept"];
            };
            path: {
                /** @description The theme identifier. */
                uuid: components["parameters"]["ThemeIdParam"];
            };
            cookie?: never;
        };
        /**
         * Get Theme Configuration
         * @description Returns a list of theme's configurations.
         *
         *     **Usage Notes**:
         *     * At least one filter must be provided.
         */
        get: operations["getThemeConfiguration"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/themes/{uuid}/configurations/validate": {
        parameters: {
            query?: never;
            header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components["parameters"]["Accept"];
            };
            path: {
                /** @description The theme identifier. */
                uuid: components["parameters"]["ThemeIdParam"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate Theme Configuration
         * @description Validates a theme configuration against the theme's schema without creating it. Useful for testing schemas before creation.
         */
        post: operations["validateThemeConfiguration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/themes/custom-templates/{version_uuid}": {
        parameters: {
            query?: never;
            header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components["parameters"]["Accept"];
            };
            path: {
                version_uuid: string;
            };
            cookie?: never;
        };
        /**
         * Get Custom Templates
         * @description Enumerate available custom templates for in the theme files in a specific theme version for each supported entity type.
         */
        get: operations["getThemeCustomTemplates"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * Collection Meta
         * @description Response metadata.
         */
        CollectionMeta: {
            [key: string]: unknown;
        };
        /**
         * Themes Collection Meta
         * @description Response metadata.
         */
        ThemesCollectionMeta: {
            [key: string]: unknown;
        };
        /** @description Response metadata. */
        Meta: {
            [key: string]: unknown;
        };
        /** Error Response */
        ErrorResponse: {
            /** @description The HTTP status code.
             *      */
            status?: number;
            /** @description The error title describing the particular error.
             *      */
            title?: string;
            type?: string;
            instance?: string;
        } & {
            /** Detailed Errors */
            errors?: {
                [key: string]: unknown;
            };
        };
        /**
         * Base Error
         * @description Error payload for the BigCommerce API.
         *
         */
        BaseError: {
            /** @description The HTTP status code.
             *      */
            status?: number;
            /** @description The error title describing the particular error.
             *      */
            title?: string;
            type?: string;
            instance?: string;
        };
        /** Detailed Errors */
        DetailedErrors: {
            [key: string]: unknown;
        };
        /**
         * Not Found
         * @description Error payload for the BigCommerce API.
         */
        NotFound: {
            /** @description 404 HTTP status code.
             *      */
            status?: number;
            /** @description The error title describing the particular error. */
            title?: string;
            type?: string;
            instance?: string;
        };
        /**
         * Job Id
         * @description The job identifier for theme upload or download.
         */
        JobId: {
            /** @description The job identifier. */
            job_id?: string;
        };
        /**
         * No Content
         * @description No-content response for the BigCommerce API.
         */
        NoContent: {
            /** @description 204 HTTP status code.
             *      */
            status?: number;
            /** @description The error title describing the situation. */
            title?: string;
            type?: string;
            instance?: string;
        };
        /**
         * Job
         * @description The job for theme upload or download
         */
        Job: {
            /** @description The errors. */
            errors?: {
                /** @description The error. */
                error?: string;
                /** @description The message. */
                message?: string;
            }[];
            /** @description The identifier. */
            id?: string;
            /** @description The percent complete. */
            percent_complete?: number;
            /** @description The result. */
            result?: {
                [key: string]: unknown;
            };
            /**
             * @description The status.
             * @enum {string}
             */
            status?: "COMPLETED" | "QUEUED" | "WORKING" | "FAILED";
            /**
             * Format: date-time
             * @description The time.
             */
            time?: string;
            /** @description The warnings. */
            warnings?: {
                /** @description The message. */
                message?: string;
                /** @description The warning. */
                warning?: string;
            }[];
        };
        /** @description A theme. */
        Theme: {
            /** @description The variations. */
            variations?: {
                /** @description The description. */
                description?: string;
                /** @description The external identifier. */
                external_id?: string;
                /** @description The name. */
                name?: string;
                /** @description The identifier. */
                uuid?: string;
            }[];
            /** @description The identifier. */
            uuid?: string;
            /** @description The theme name identifier. */
            name?: string;
            /** @description Flag to identify private themes. */
            is_private?: boolean;
            /** @description Indicates whether this theme is active on the storefront. */
            is_active?: boolean;
            /** @description The date-time of the last theme update. */
            updated_at?: string;
        };
        /**
         * Activate
         * @description Request definition for activation endpoint.
         */
        Activate: {
            /** @description The identifier for the variation to activate. */
            variation_id: string;
            /**
             * @description Which configuration to use.
             * @enum {string}
             */
            which?: "original" | "last_activated" | "last_created";
        };
        /** @description A variation. */
        Variation: {
            /** @description The description. */
            description?: string;
            /** @description The external identifier. */
            external_id?: string;
            /** @description The name. */
            name?: string;
            /** @description The identifier. */
            uuid?: string;
        };
        /**
         * Themes Collection Response
         * @description Response payload for the BigCommerce API.
         *
         */
        ThemesCollectionResponse: {
            data?: {
                /** @description The variations. */
                variations?: {
                    /** @description The description. */
                    description?: string;
                    /** @description The external identifier. */
                    external_id?: string;
                    /** @description The name. */
                    name?: string;
                    /** @description The identifier. */
                    uuid?: string;
                }[];
                /** @description The identifier. */
                uuid?: string;
                /** @description The theme name identifier. */
                name?: string;
                /** @description Flag to identify private themes. */
                is_private?: boolean;
                /** @description Indicates whether this theme is active on the storefront. */
                is_active?: boolean;
                /** @description The date-time of the last theme update. */
                updated_at?: string;
            }[];
            /**
             * Collection Meta
             * @description Response metadata.
             */
            meta?: {
                [key: string]: unknown;
            };
        };
        /**
         * Theme Response
         * @description Response payload for the BigCommerce API.
         *
         */
        ThemeResponse: {
            data?: components["schemas"]["Theme"];
            meta?: components["schemas"]["CollectionMeta"];
        };
        /**
         * Job Response
         * @description Response for /GET Jobs by Id.
         */
        JobResponse: {
            /**
             * Job
             * @description The job for theme upload or download
             */
            data?: {
                /** @description The errors. */
                errors?: {
                    /** @description The error. */
                    error?: string;
                    /** @description The message. */
                    message?: string;
                }[];
                /** @description The identifier. */
                id?: string;
                /** @description The percent complete. */
                percent_complete?: number;
                /** @description The result. */
                result?: {
                    [key: string]: unknown;
                };
                /**
                 * @description The status.
                 * @enum {string}
                 */
                status?: "COMPLETED" | "QUEUED" | "WORKING" | "FAILED";
                /**
                 * Format: date-time
                 * @description The time.
                 */
                time?: string;
                /** @description The warnings. */
                warnings?: {
                    /** @description The message. */
                    message?: string;
                    /** @description The warning. */
                    warning?: string;
                }[];
            };
            meta?: components["schemas"]["OpenMeta"];
        };
        /**
         * Which Theme To Download
         * @description An object specifying which theme to download. One of: `original`: the original Marketplace or uploaded custom theme; `last_activated`: the theme version most recently applied to the store; `last_created`: the theme version most recently created. If `which` is missing or invalid in the request, its value will default to `last_activated`.
         */
        WhichThemeToDownload: {
            /**
             * @description Which revision to use.
             * @example original
             * @enum {string}
             */
            which?: "original" | "last_activated" | "last_created";
        };
        /**
         * Request Headers
         * @description These are the minium request headers needed for BigCommerce.
         */
        RequestHeaders: {
            /** @default application/json */
            Accepts: string;
        };
        /**
         * themeConfiguration_Full
         * @description A theme.
         */
        themeConfiguration_Full: {
            uuid?: string;
            /** @description The Theme to which the Configuration belongs. */
            theme_uuid?: string;
            /** @description The Variation to which the Configuration belongs. */
            variation_id?: string;
            /**
             * Format: json
             * @description The content of the configuration, which is a JSON object which will vary in structure from theme to theme.
             */
            settings?: {
                [key: string]: unknown;
            };
            date_created?: string;
            /** @description Site ID to which this configuration belongs. Will be 0 for the original configuration for a Theme. */
            site_id?: number;
        };
        /**
         * themeConfiguration_Write
         * @description A theme.
         */
        themeConfiguration_Write: {
            /** @description The Variation to which the Configuration belongs. */
            variation_id?: string;
            /**
             * Format: json
             * @description The content of the configuration, which is a JSON object which will vary in structure from theme to theme.
             */
            settings?: {
                [key: string]: unknown;
            };
        };
        /**
         * Response meta
         * @description Response metadata.
         */
        OpenMeta: {
            [key: string]: unknown;
        };
    };
    responses: {
        themesConfigurations_RespCollection: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    data?: components["schemas"]["themeConfiguration_Full"][];
                    meta?: components["schemas"]["ThemesCollectionMeta"];
                };
            };
        };
    };
    parameters: {
        /** @description The job identifier. */
        JobIdParam: string;
        /** @description The theme identifier. */
        ThemeIdParam: string;
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
        Accept: string;
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
        ContentType: string;
        /** @description Specifies the page number in a limited (paginated) list.
         *      */
        PageParam: number;
        /** @description Controls the number of items per page in a limited (paginated) list of products.
         *      */
        LimitParam: number;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getStoreThemes: {
        parameters: {
            query?: never;
            header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components["parameters"]["Accept"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ThemesCollectionResponse"];
                };
            };
        };
    };
    uploadStoreTheme: {
        parameters: {
            query?: never;
            header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                "Content-Type": components["parameters"]["ContentType"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    /**
                     * Format: binary
                     * @description The file.
                     */
                    file: string;
                };
            };
        };
        responses: {
            /** @description Job ID for the background job processing the theme upload. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobId"];
                };
            };
            /** @description Error message. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The HTTP status code.
                         *      */
                        status?: number;
                        /** @description The error title describing the particular error.
                         *      */
                        title?: string;
                        type?: string;
                        instance?: string;
                    } & {
                        /** DetailedErrors */
                        errors?: {
                            [key: string]: unknown;
                        };
                    };
                };
            };
        };
    };
    getStoreTheme: {
        parameters: {
            query?: never;
            header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components["parameters"]["Accept"];
            };
            path: {
                /** @description The theme identifier. */
                uuid: components["parameters"]["ThemeIdParam"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ThemeResponse"];
                };
            };
            /** @description Error message. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The HTTP status code.
                         *      */
                        status?: number;
                        /** @description The error title describing the particular error.
                         *      */
                        title?: string;
                        type?: string;
                        instance?: string;
                    } & {
                        /** Detailed Errors */
                        errors?: {
                            [key: string]: unknown;
                        };
                    };
                };
            };
        };
    };
    deleteStoreTheme: {
        parameters: {
            query?: never;
            header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components["parameters"]["Accept"];
            };
            path: {
                /** @description The theme identifier. */
                uuid: components["parameters"]["ThemeIdParam"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error message. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The HTTP status code.
                         *      */
                        status?: number;
                        /** @description The error title describing the particular error.
                         *      */
                        title?: string;
                        type?: string;
                        instance?: string;
                    } & {
                        /** DetailedErrors */
                        errors?: {
                            [key: string]: unknown;
                        };
                    };
                };
            };
        };
    };
    downloadStoreTheme: {
        parameters: {
            query?: never;
            header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                "Content-Type": components["parameters"]["ContentType"];
            };
            path: {
                /** @description The theme identifier. */
                uuid: components["parameters"]["ThemeIdParam"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WhichThemeToDownload"];
            };
        };
        responses: {
            /** @description Job ID for the background job processing the download. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobId"];
                };
            };
            /** @description Error message. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The HTTP status code.
                         *      */
                        status?: number;
                        /** @description The error title describing the particular error.
                         *      */
                        title?: string;
                        type?: string;
                        instance?: string;
                    } & {
                        /** Detailed Errors */
                        errors?: {
                            [key: string]: unknown;
                        };
                    };
                };
            };
        };
    };
    activateStoreTheme: {
        parameters: {
            query?: {
                /** @description The ID for the channel where you want to activate the theme. */
                channel_id?: number;
            };
            header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                "Content-Type": components["parameters"]["ContentType"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description Request parameters. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Activate"];
            };
        };
        responses: {
            /** @description This returns when the request is successful. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NoContent"];
                };
            };
            /** @description Error message. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The HTTP status code.
                         *      */
                        status?: number;
                        /** @description The error title describing the particular error.
                         *      */
                        title?: string;
                        type?: string;
                        instance?: string;
                    } & {
                        /** Detailed Errors */
                        errors?: {
                            [key: string]: unknown;
                        };
                    };
                };
            };
        };
    };
    getStoreThemeJob: {
        parameters: {
            query?: never;
            header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components["parameters"]["Accept"];
            };
            path: {
                /** @description The job identifier. */
                job_id: components["parameters"]["JobIdParam"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobResponse"];
                };
            };
            /** @description Error message. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The HTTP status code.
                         *      */
                        status?: number;
                        /** @description The error title describing the particular error.
                         *      */
                        title?: string;
                        type?: string;
                        instance?: string;
                    } & {
                        /** Detailed Errors */
                        errors?: {
                            [key: string]: unknown;
                        };
                    };
                };
            };
        };
    };
    getThemeConfiguration: {
        parameters: {
            query?: {
                /** @description Filter configurations by passing a comma-separated list of configuration UUIDs. */
                "uuid:in"?: string[];
                /** @description Filter configurations by a variation_uuid. */
                variation_uuid?: string;
                /** @description Filter configurations by passing a comma-separated list of channel IDs. */
                "channel_id:in"?: number[];
                /** @description Specifies the page number in a limited (paginated) list.
                 *      */
                page?: components["parameters"]["PageParam"];
                /** @description Controls the number of items per page in a limited (paginated) list of products.
                 *      */
                limit?: components["parameters"]["LimitParam"];
            };
            header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components["parameters"]["Accept"];
            };
            path: {
                /** @description The theme identifier. */
                uuid: components["parameters"]["ThemeIdParam"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["themesConfigurations_RespCollection"];
        };
    };
    validateThemeConfiguration: {
        parameters: {
            query?: never;
            header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                "Content-Type": components["parameters"]["ContentType"];
            };
            path: {
                /** @description The theme identifier. */
                uuid: components["parameters"]["ThemeIdParam"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["themeConfiguration_Write"];
            };
        };
        responses: {
            /** @description Theme passes validation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Theme failed validation, detailed errors in response. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getThemeCustomTemplates: {
        parameters: {
            query?: never;
            header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components["parameters"]["Accept"];
            };
            path: {
                version_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            product?: string[];
                            category?: string[];
                            brand?: string[];
                            page?: string[];
                        };
                        meta?: components["schemas"]["OpenMeta"];
                    };
                };
            };
        };
    };
}
