/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/storefront/api-token": {
        parameters: {
            query?: never;
            header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components["parameters"]["Accept"];
            };
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a Token
         * @description Creates a Storefront API token.
         *
         *     **Required Scopes**
         *     * `Manage` `Storefront API Tokens`
         */
        post: operations["createToken"];
        /**
         * Revoke a Token
         * @description Revoke access for a Storefront API token. Only revoke compromised tokens under emergency situations. Let uncompromised short-lived tokens expire naturally, as you do not need to revoke these.
         */
        delete: operations["revokeToken"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/storefront/api-token-customer-impersonation": {
        parameters: {
            query?: never;
            header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components["parameters"]["Accept"];
            };
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a Token
         * @description Returns a Storefront API token that allows your application to impersonate customers when making GraphQL `POST` requests. For more information on how to use the returned token, see [customer impersonation tokens](/docs/rest-authentication/tokens/customer-impersonation-token#create-a-token).
         *
         *     **Required Scopes**
         *     * `Manage` `Storefront API Customer Impersonation Tokens`
         */
        post: operations["createTokenWithCustomerImpersonation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        TokenPostImpersonation: {
            /**
             * @description Unix timestamp (UTC time) defining when the token should expire. Supports seconds, but does not support milliseconds, microseconds, or nanoseconds.
             * @example 1885635176
             */
            expires_at: number;
        } & (components["schemas"]["Channels"] | components["schemas"]["Channel"]);
        TokenPostSimple: {
            /** @description List of allowed domains for Cross-Origin Request Sharing. Currently accepts a maximum of two domains per created token. */
            allowed_cors_origins?: string[];
        };
        Token_Full: {
            data?: components["schemas"]["Token_Base"];
            /** @description Response metadata. */
            meta?: {
                [key: string]: unknown;
            };
        };
        Token_Base: {
            /** @description JWT Token for accessing the Storefront API */
            token?: string;
        };
        /** channel_id */
        Channel: {
            /**
             * @description Channel ID that is valid for the requested token. Use this field to enter a channel ID. Do not use this field if you have more than one channel. We support this field for backwards compatibility, but `channel_ids` is preferred. You can not use both `channel_id` and `channel_ids` in your request.
             * @example 1
             */
            channel_id: number;
        };
        /** channel_ids */
        Channels: {
            /**
             * @description A list of channel IDs that are valid for the requested token. Use this field if you have more than one channel ID. You can not use both `channel_id` and `channel_ids` in your request.
             * @example [
             *       667251,
             *       1
             *     ]
             */
            channel_ids: number[];
        };
        ErrorResponse: components["schemas"]["BaseError"] & {
            errors?: components["schemas"]["DetailedErrors"];
        };
        /** @description Error payload for the BigCommerce API.
         *      */
        BaseError: {
            /** @description The HTTP status code.
             *      */
            status?: number;
            /** @description The error title describing the particular error.
             *      */
            title?: string;
            type?: string;
        };
        DetailedErrors: {
            [key: string]: string;
        };
    };
    responses: {
        TokenResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Token_Full"];
            };
        };
    };
    parameters: {
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
        Accept: string;
        /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
        ContentType: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    createToken: {
        parameters: {
            query?: never;
            header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                "Content-Type": components["parameters"]["ContentType"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "allowed_cors_origins": [
                 *         "https://www.yourstorefront.com/"
                 *       ],
                 *       "channel_id": 1,
                 *       "expires_at": 1885635176
                 *     } */
                "application/json": components["schemas"]["TokenPostSimple"] & components["schemas"]["TokenPostImpersonation"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Token_Full"];
                };
            };
            /** @description Unauthorized - the v3 Auth client ID or token in the request are not a valid combination for this store. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing scope - the v3 Auth token is valid but does not have proper permissions to access this endpoint. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid JSON request body - missing or invalid data. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    revokeToken: {
        parameters: {
            query?: never;
            header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components["parameters"]["Accept"];
                /** @description An existing JWT token that you want to revoke. */
                "Sf-Api-Token": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A storefront API token revocation has been scheduled. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - the v3 Auth client ID or token in the request are not a valid combination for this store. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing scope - the v3 Auth token is valid but does not have proper permissions to access this endpoint. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid JWT Token provided or missing JWT token header */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createTokenWithCustomerImpersonation: {
        parameters: {
            query?: never;
            header: {
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body. */
                Accept: components["parameters"]["Accept"];
                /** @description The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body. */
                "Content-Type": components["parameters"]["ContentType"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TokenPostImpersonation"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Token_Full"];
                };
            };
            /** @description Unauthorized - the v3 Auth client ID or token in the request are not a valid combination for this store. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing scope - the v3 Auth token is valid but does not have proper permissions to access this endpoint. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid JSON request body - missing or invalid data */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
